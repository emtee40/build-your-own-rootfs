#!/bin/sh

wget --version >/dev/null 2>/dev/null || { echo "wget program required"; exit; }
basename --version >/dev/null 2>/dev/null || { echo "basename program required"; exit; }
dirname --version >/dev/null 2>/dev/null || { echo "dirname program required"; exit; }

if [ "x$1" = "x" ]; then
    echo "please use path to your toolchain, with toolchain prefix, e.g /usr/bin/armv7a-hardfloat-linux-gnueabi-"
    exit
fi

DIR=`dirname $1`
if [ $DIR != "." ]; then
	echo -e "path:\t$DIR"
	PATH=`dirname $1`:$PATH
fi

CROSS_COMPILE=$(basename $1)
HOST=${CROSS_COMPILE:0:-1}
echo -e "cc:\t$CROSS_COMPILE"
echo -e "host:\t$HOST"
ARCH=$(
	IFS=-
	set -- $HOST
	echo $1
)
echo -e "arch:\t$ARCH"

${CROSS_COMPILE}gcc --version >/dev/null || { echo "${CROSS_COMPILE}gcc was not found"; exit; }

export PATH
export HOST
export CROSS_COMPILE
export ARCH

function download {
    mkdir .sources 2> /dev/null
    URL=$1
    FILE=`basename $URL`
    DST=.sources/$FILE
    if [ ! -e $DST ]; then
        wget -o .sources/wget.log -c $URL -O $DST.partial || { echo "failed downloading $URL"; exit; }
        mv $DST.partial $DST
    fi
    echo $DST
}

function unpack {
    SRC=$1
    DST=$2
    mkdir -p .build 2>/dev/null
    if [ ! -e .build/$DST ]; then
        tar xf $SRC -C .build
    fi
}

function log {
    echo "${PACKAGE}: $*"
}

function append {
    SRC=$1
    tar --append --file=$ROOTFS --owner=0 --group=0 .
}

function cleanup_files {
    rm -rf usr/include
    rm -rf usr/lib/include
    rm -rf usr/share/aclocal
    rm -rf usr/share/doc
    rm -rf usr/share/i18n
    rm -rf usr/share/info
    rm -rf usr/share/man
    rm -rf usr/ssl
    rm -rf var/db
    rm -rf etc/portage
    rm -rf sys-include
}

JOBS=8
ROOTFS=`pwd`/root.tar

rm -rf .install
mkdir .install
export INSTALL_DIR=`pwd`/.install

export CC=${HOST}gcc
export CXX=${HOST}g++

rm -f $ROOTFS

. packages/layout

. packages/busybox

. packages/zlib
. packages/lzo

. packages/e2fsprogs
. packages/mtd-utils

. packages/libpng
. packages/libjpeg-turbo
. packages/freetype

. packages/openssl
. packages/libnl
#. packages/wpa-supplicant #need kernel headers

pushd .build/layout
cleanup_files
append
popd

pushd .install
cleanup_files
append
popd

echo OK
